<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Hadoken</title>
    <link>https://firer1946.github.io/post/</link>
    <description>Recent content in Posts on Hadoken</description>
    <image>
      <url>https://firer1946.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://firer1946.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 21 Dec 2021 17:32:00 +0800</lastBuildDate><atom:link href="https://firer1946.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>test</title>
      <link>https://firer1946.github.io/post/2021/test/</link>
      <pubDate>Tue, 21 Dec 2021 17:32:00 +0800</pubDate>
      
      <guid>https://firer1946.github.io/post/2021/test/</guid>
      <description>obsidian测试</description>
    </item>
    
    <item>
      <title>Hugo使用</title>
      <link>https://firer1946.github.io/post/2021/hugo%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 21 Dec 2021 12:38:00 +0800</pubDate>
      
      <guid>https://firer1946.github.io/post/2021/hugo%E4%BD%BF%E7%94%A8/</guid>
      <description>之前使用grdiea,确实很好,但是灵活性相对差一些,主要比较少的主题可选 因此现在切换到了hugo,整体的构建速度很快,毫秒级的速度,整体设计比较优雅, 对比了一下其他的框架,使用go也不需要那么多的依赖,安装环境方便
自动化部署 加上一些自动化部署,就只需要一些把markdown内容到私有git,程序就自动构建并推送GitHub pages仓库,整体很方便,同时搭建一个预览服务使用systemd托管, 就所见即可得了
脚本
1 2 3 4 5 6 7 8  echo &amp;#34;=====&amp;#34; date git pull /root/go/bin/hugo --theme=PaperMod --baseUrl=&amp;#39;https://firer1946.github.io&amp;#39; cd public git add -A git commit -m &amp;#39;update&amp;#39; git push origin master   主题选择 经过一轮对比,选择了PaperMod,外观简洁,且功能也比较齐全,很满意
安装 1 2 3  git clone https://github.com/gohugoio/hugo.git cd hugo go install   常用命令 1 2 3 4 5 6 7 8  # 创建站点 hugo new site /path/to/site -f yaml # serve hugo server --theme=PaperMod --buildDrafts --bind=&amp;#34;0.</description>
    </item>
    
    <item>
      <title>junk软件隔离计划</title>
      <link>https://firer1946.github.io/post/2021/junk%E8%BD%AF%E4%BB%B6%E9%9A%94%E7%A6%BB%E8%AE%A1%E5%88%92/</link>
      <pubDate>Fri, 22 Jan 2021 16:21:00 +0800</pubDate>
      
      <guid>https://firer1946.github.io/post/2021/junk%E8%BD%AF%E4%BB%B6%E9%9A%94%E7%A6%BB%E8%AE%A1%E5%88%92/</guid>
      <description>由于最近qq扫描浏览器文件的问题，只能把这些不规矩的软件都请到虚拟机里边去了，包括深信服，深信服装个windows版的v2ray服务端映射出来即可
hyper-v虚拟机 选择这个是因为性能够强，几乎能达到物理机的水平，内存分配1.5g，cpu 2核
把qq和微信直接扔进去耍就可以了,好处就是几乎不会关机,物理机关机只会挂起相当于睡眠
微信不用每次都重新登录
远程分辨率的问题 由于使用4k屏发现远程桌面不全屏缩放比例就不对了，找了半天终于找到了解决方案，虽然不知道具体原理，但是基本解决了问题，保持原始分辨率，虽然糊了点
解决方案
1 2 3 4 5 6 7  cd %systemroot%\system32 copy mstsc.exe mstsc2.exe cd %systemroot%\system32\en-us\ copy mstsc.exe.mui mstsc2.exe.mui # 修改注册表 reg add &amp;#34;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers&amp;#34; /t REG_SZ /v &amp;#34;C:\Windows\System32\mstsc2.exe&amp;#34; /d &amp;#34;~ DPIUNAWARE&amp;#34; /f   然后把rdp保存为配置文件运行即可
1  mstsc2 xxx.rdp   最终效果 效果比想象地要好，几乎没有什么延迟</description>
    </item>
    
    <item>
      <title>pyqt5 &amp;&amp; python打包</title>
      <link>https://firer1946.github.io/post/2021/pyqt5-python%E6%89%93%E5%8C%85/</link>
      <pubDate>Tue, 12 Jan 2021 16:21:00 +0800</pubDate>
      
      <guid>https://firer1946.github.io/post/2021/pyqt5-python%E6%89%93%E5%8C%85/</guid>
      <description>最近需要给之前的命令行程序写一个界面，使用Qt-designer拖界面还是比较方便的，其中一个比较麻烦的问题就是实时输出日志的问题，直接使用os.popen会导致窗口进程直接卡死，需要使用qt提供的Qprocess来处理，然而最终还是有问题；才发现是python的缓存问题，直接运行可以使用-u解决，但是pyinstaller打包不支持unbuffered,最终使用了py2exe
pyqt5 高分屏支持 1  os.environ[&amp;#34;QT_AUTO_SCREEN_SCALE_FACTOR&amp;#34;] = &amp;#34;1&amp;#34;   Qprocess子进程 为了防止大批量的任务导致窗口进程卡死，需要使用qt实现的qprocess来调用，使用os.popen 和 subprocess都是会出问题的
1 2 3  self.process = QtCore.QProcess() self.textEdit.clear() self.process.start(command)   系统命令实时日志获取 因为python缓冲区的问题，误以为是qt这部分的问题
1 2 3 4 5 6 7 8 9 10  # process 部分 self.process.readyRead.connect(self.dataReady) # 输出槽函数 def dataReady(self): cursor = self.textEdit.textCursor() cursor.movePosition(cursor.End) text = self.process.readAll() cursor.insertText(str(text)) self.textEdit.ensureCursorVisible() print(text)   打包 使用了好几个打包成exe的工具，发现基本都没办法很好的支持unbuffered，不关闭缓存就无法正常地实时获取运行的日志，pyinstaller, cxfreeze 直接打包还可以，但是不支持，还是py2exe好用
pyinstaller 1 2  # 其他程序没有二进制依赖可以不加--paths pyinstaller --paths C:\Users\firer\.</description>
    </item>
    
    <item>
      <title>ventoy iso启动</title>
      <link>https://firer1946.github.io/post/2021/ventoy-iso%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Wed, 06 Jan 2021 16:21:00 +0800</pubDate>
      
      <guid>https://firer1946.github.io/post/2021/ventoy-iso%E5%90%AF%E5%8A%A8/</guid>
      <description>这个工具写入u盘后可以直接启动iso镜像，以后就不用反复地格盘了，平时也可以正常当u盘使用，配合wepe工具箱应该很不错
类似功能的听说还有yumi</description>
    </item>
    
    <item>
      <title>超大量用户数据去重</title>
      <link>https://firer1946.github.io/post/2021/%E8%B6%85%E5%A4%A7%E9%87%8F%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D/</link>
      <pubDate>Wed, 06 Jan 2021 16:21:00 +0800</pubDate>
      
      <guid>https://firer1946.github.io/post/2021/%E8%B6%85%E5%A4%A7%E9%87%8F%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D/</guid>
      <description>之前统计系统到需要亿级的用户设备id去重，统计新增用户，直接使用clickhouse join由于笛卡尔积的原因导致效率偏低，早有听闻hbase rowkey的效率比较高，就想到了使用它来进行去重，把需要去重的键值连起来，每条数据查重理论上复杂度为1，当成一个比较大的redis来使用。
使用起来效果非常惊人，Result[] get(List&amp;lt;Get&amp;gt; var1) 这个函数提供了大量rowkey的查询，10万条数据几乎不到1s的时间，使用java进行求差集的效率也很不错，整体每天的数据批量去重只需要几秒钟就能完成
如果时间差距过大，采取每天轮询的方式还是很不错的，保证每个批次的数据量不会太大，降低hbase的数据吞吐压力，曾经尝试每次查询200万的数据都是没有问题，只是数据传输的时间会长一些
当然也可以用来redis来做这个处理，但是redis可能持久化存储这么多数据是一件比较麻烦的事情，而hbase本来就有海量存储的这个属性，不得不说比hive快了好多</description>
    </item>
    
    <item>
      <title>calibre-web的部署</title>
      <link>https://firer1946.github.io/post/2021/calibre-web%E7%9A%84%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Mon, 04 Jan 2021 16:21:00 +0800</pubDate>
      
      <guid>https://firer1946.github.io/post/2021/calibre-web%E7%9A%84%E9%83%A8%E7%BD%B2/</guid>
      <description>最近开始准备书单开始读书，需要一个管理系统来管理书籍，看到这个效果还不错，也支持在线阅读和格式转换，可以说是相当完善了，发送到kindle的功能比较实用
docker-compose 找到technosoft2000/calibre-web的镜像并使用docker-compose进行部署
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  version:&amp;#34;3&amp;#34;services:calibre-web:image:technosoft2000/calibre-web:latestcontainer_name:calibre_webenvironment:- APP_REPO=&amp;#34;https://github.com/firer1946/calibre-web.git&amp;#34;- AMAZON_KG_URL=&amp;#34;https://github.com/Technosoft2000/docker-calibre-web/releases/download/kindlegen/kindlegen_linux_2.6_i386_v2_9.tar.gz&amp;#34;- CALIBRE_INSTALLER_SOURCE_CODE_URL=&amp;#34;https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py&amp;#34;volumes:- {{calibre_web.config_dir}}:/config- {{calibre_web.books_dir}}:/booksports:- {{calibre_web.port}}:8083restart:unless-stopped  {{calibre_web.config_dir}}修改为自己的配置文件夹，需要权限修改为777，chmod -R 777 &amp;lt;文件夹&amp;gt;，不然无法上传书籍
{{calibre_web.books_dir}} 主要是存放书籍的目录
{{calibre_web.port}} 开放端口
网络不好的话最好把AMAZON_KG_URL，CALIBRE_INSTALLER_SOURCE_CODE_URL的文件手动下载下来，使用ansible部署还是比较方便的
中文化修改 通过technosoft2000的镜像部署下来发现下载和推送到kindle的中文书籍都是拼音，原来是存储的时候使用了拼音作为文件名，所以在下载和发邮件的部分做了一些魔改，具体修改见仓库,由于只是针对中文下的修改，所以就不提pr了
效果如下:</description>
    </item>
    
    <item>
      <title>start</title>
      <link>https://firer1946.github.io/post/2021/start/</link>
      <pubDate>Mon, 04 Jan 2021 16:21:00 +0800</pubDate>
      
      <guid>https://firer1946.github.io/post/2021/start/</guid>
      <description>2021，开始重新写blogs，简单记录一下，使用什么工具不重要，只要是快速开始写起来就很好，gridea还是比较方便的，相当于本地的静态站点生成器，同步到github pages 对应的仓库即可</description>
    </item>
    
  </channel>
</rss>
