<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://firer1946.github.io</id>
    <title>firer</title>
    <updated>2021-01-22T02:38:34.705Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://firer1946.github.io"/>
    <link rel="self" href="https://firer1946.github.io/atom.xml"/>
    <subtitle>firer&apos;s blog</subtitle>
    <logo>https://firer1946.github.io/images/avatar.png</logo>
    <icon>https://firer1946.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, firer</rights>
    <entry>
        <title type="html"><![CDATA[junk软件隔离计划]]></title>
        <id>https://firer1946.github.io/post/junk-ruan-jian-ge-chi-ji-hua/</id>
        <link href="https://firer1946.github.io/post/junk-ruan-jian-ge-chi-ji-hua/">
        </link>
        <updated>2021-01-22T02:31:06.000Z</updated>
        <summary type="html"><![CDATA[<p>由于最近qq扫描浏览器文件的问题，只能把这些不规矩的软件都请到虚拟机里边去了，包括深信服，深信服装个windows版的v2ray服务端映射出来即可</p>
]]></summary>
        <content type="html"><![CDATA[<p>由于最近qq扫描浏览器文件的问题，只能把这些不规矩的软件都请到虚拟机里边去了，包括深信服，深信服装个windows版的v2ray服务端映射出来即可</p>
<!-- more -->
<h1 id="hyper-v虚拟机">hyper-v虚拟机</h1>
<p>选择这个是因为性能够强，几乎能达到物理机的水平，内存分配1.5g，cpu 2核<br>
把qq和微信直接扔进去耍就可以了,<strong>好处就是几乎不会关机</strong>,物理机关机只会挂起相当于睡眠<br>
微信不用每次都重新登录</p>
<h1 id="远程分辨率的问题">远程分辨率的问题</h1>
<p>由于使用4k屏发现远程桌面不全屏缩放比例就不对了，找了半天终于找到了解决方案，虽然不知道具体原理，但是基本解决了问题，保持原始分辨率，虽然糊了点</p>
<p>https://superuser.com/questions/1457955/remoteapp-doesnt-apply-correct-scaling-initially</p>
<pre><code class="language-powershell">cd %systemroot%\system32
copy mstsc.exe mstsc2.exe
cd %systemroot%\system32\en-us\
copy mstsc.exe.mui mstsc2.exe.mui

# 修改注册表
reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers&quot; /t REG_SZ /v &quot;C:\Windows\System32\mstsc2.exe&quot; /d &quot;~ DPIUNAWARE&quot; /f
</code></pre>
<p>然后把rdp保存为配置文件运行即可</p>
<figure data-type="image" tabindex="1"><img src="https://firer1946.github.io/post-images/1611282825649.png" alt="" loading="lazy"></figure>
<pre><code class="language-powershell">mstsc2 xxx.rdp
</code></pre>
<h1 id="最终效果">最终效果</h1>
<p>效果比想象地要好，几乎没有什么延迟</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyqt5 && python打包]]></title>
        <id>https://firer1946.github.io/post/pyqt5-and-python-da-bao/</id>
        <link href="https://firer1946.github.io/post/pyqt5-and-python-da-bao/">
        </link>
        <updated>2021-01-12T06:20:41.000Z</updated>
        <summary type="html"><![CDATA[<p>最近需要给之前的命令行程序写一个界面，使用Qt-designer拖界面还是比较方便的，其中一个比较麻烦的问题就是实时输出日志的问题，直接使用<code>os.popen</code>会导致窗口进程直接卡死，需要使用qt提供的Qprocess来处理，然而最终还是有问题；才发现是python的缓存问题，直接运行可以使用<code>-u</code>解决，但是pyinstaller打包不支持unbuffered,最终使用了py2exe</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近需要给之前的命令行程序写一个界面，使用Qt-designer拖界面还是比较方便的，其中一个比较麻烦的问题就是实时输出日志的问题，直接使用<code>os.popen</code>会导致窗口进程直接卡死，需要使用qt提供的Qprocess来处理，然而最终还是有问题；才发现是python的缓存问题，直接运行可以使用<code>-u</code>解决，但是pyinstaller打包不支持unbuffered,最终使用了py2exe</p>
<!-- more -->
<h1 id="pyqt5">pyqt5</h1>
<h2 id="高分屏支持">高分屏支持</h2>
<pre><code class="language-python">os.environ[&quot;QT_AUTO_SCREEN_SCALE_FACTOR&quot;] = &quot;1&quot;
</code></pre>
<h2 id="qprocess子进程">Qprocess子进程</h2>
<p>为了防止大批量的任务导致窗口进程卡死，需要使用qt实现的qprocess来调用，使用os.popen 和 subprocess都是会出问题的</p>
<pre><code class="language-python">self.process = QtCore.QProcess()
self.textEdit.clear()
self.process.start(command)
</code></pre>
<h2 id="系统命令实时日志获取">系统命令实时日志获取</h2>
<p>因为python缓冲区的问题，误以为是qt这部分的问题</p>
<pre><code class="language-python"># process 部分
self.process.readyRead.connect(self.dataReady)
# 输出槽函数
def dataReady(self):
    cursor = self.textEdit.textCursor()
    cursor.movePosition(cursor.End)
    text = self.process.readAll()
    cursor.insertText(str(text))
    self.textEdit.ensureCursorVisible()
    print(text)
</code></pre>
<h1 id="打包">打包</h1>
<p>使用了好几个打包成exe的工具，发现基本都没办法很好的支持unbuffered，不关闭缓存就无法正常地实时获取运行的日志，pyinstaller, cxfreeze 直接打包还可以，但是不支持，还是py2exe好用</p>
<h3 id="pyinstaller">pyinstaller</h3>
<pre><code class="language-bash"># 其他程序没有二进制依赖可以不加--paths
pyinstaller --paths C:\Users\firer\.virtualenvs\compress_images-8VD5V_Md\Lib\site-packages\PyQt5\Qt\bin -F -w .\image_compress_ui.py
</code></pre>
<h3 id="cxfreeze">cxfreeze</h3>
<p>需要打包的文件夹创建<code>setup.py</code>（任意名字都可以）</p>
<pre><code class="language-python">import sys
from cx_Freeze import setup, Executable

include_files = []

build_exe_options = {'packages': ['PIL'],
                     'excludes': [],
                     'include_files':include_files
                     }
base = None
if sys.platform == 'win32':
  base = 'Win32GUI'
 
setup(  name = 'imagesCompress',
        version = '0.1',
        description = '文件压缩',
        options = {'build_exe': build_exe_options},
        executables = [Executable('image_compress.py')])
</code></pre>
<p>然后执行 <code>python .\setup.py build</code></p>
<h3 id="py2exe">py2exe</h3>
<p>同cxfreeze</p>
<pre><code class="language-python">import os
from distutils.core import setup
import py2exe

Mydata_files = []
# for files in os.listdir('C:/path/to/image/directory/'):
#     f1 = 'C:/path/to/image/directory/' + files
#     if os.path.isfile(f1): # skip directories
#         f2 = 'images', [f1]
#         Mydata_files.append(f2)

setup(
    console=['image_compress.py'],
    data_files = [],
    options={
                &quot;py2exe&quot;:{
                        &quot;unbuffered&quot;: True, # 这句很关键
                        &quot;optimize&quot;: 2,
                        &quot;excludes&quot;: []
                }
        }
)
</code></pre>
<p>然后执行<code>python .\py2exe_setup.py py2exe</code>即可</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[超大量用户数据去重]]></title>
        <id>https://firer1946.github.io/post/chao-da-liang-yong-hu-shu-ju-qu-chong/</id>
        <link href="https://firer1946.github.io/post/chao-da-liang-yong-hu-shu-ju-qu-chong/">
        </link>
        <updated>2021-01-06T06:34:57.000Z</updated>
        <summary type="html"><![CDATA[<p>之前统计系统到需要亿级的用户设备id去重，统计新增用户，直接使用clickhouse join由于笛卡尔积的原因导致效率偏低，早有听闻hbase rowkey的效率比较高，就想到了使用它来进行去重，把需要去重的键值连起来，每条数据查重理论上复杂度为1，当成一个比较大的redis来使用。</p>
]]></summary>
        <content type="html"><![CDATA[<p>之前统计系统到需要亿级的用户设备id去重，统计新增用户，直接使用clickhouse join由于笛卡尔积的原因导致效率偏低，早有听闻hbase rowkey的效率比较高，就想到了使用它来进行去重，把需要去重的键值连起来，每条数据查重理论上复杂度为1，当成一个比较大的redis来使用。</p>
<!-- more -->
<p>使用起来效果非常惊人，<code>Result[] get(List&lt;Get&gt; var1)</code>这个函数提供了大量rowkey的查询，10万条数据几乎不到1s的时间，使用java进行求差集的效率也很不错，整体每天的数据批量去重只需要几秒钟就能完成</p>
<p>如果时间差距过大，采取每天轮询的方式还是很不错的，保证每个批次的数据量不会太大，降低hbase的数据吞吐压力，曾经尝试每次查询200万的数据都是没有问题，只是数据传输的时间会长一些</p>
<p>当然也可以用来redis来做这个处理，但是redis可能持久化存储这么多数据是一件比较麻烦的事情，而hbase本来就有海量存储的这个属性，不得不说比hive快了好多</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ventoy iso启动]]></title>
        <id>https://firer1946.github.io/post/ventoy-iso-qi-dong/</id>
        <link href="https://firer1946.github.io/post/ventoy-iso-qi-dong/">
        </link>
        <updated>2021-01-06T06:29:49.000Z</updated>
        <summary type="html"><![CDATA[<p>这个工具写入u盘后可以直接启动iso镜像，以后就不用反复地格盘了，平时也可以正常当u盘使用，配合wepe工具箱应该很不错</p>
]]></summary>
        <content type="html"><![CDATA[<p>这个工具写入u盘后可以直接启动iso镜像，以后就不用反复地格盘了，平时也可以正常当u盘使用，配合wepe工具箱应该很不错</p>
<!-- more -->
<p>类似功能的听说还有yumi</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[calibre-web的部署]]></title>
        <id>https://firer1946.github.io/post/calibre-web-de-bu-shu/</id>
        <link href="https://firer1946.github.io/post/calibre-web-de-bu-shu/">
        </link>
        <updated>2021-01-04T08:15:01.000Z</updated>
        <summary type="html"><![CDATA[<p>最近开始准备书单开始读书，需要一个管理系统来管理书籍，看到这个效果还不错，也支持在线阅读和格式转换，可以说是相当完善了，发送到kindle的功能比较实用</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近开始准备书单开始读书，需要一个管理系统来管理书籍，看到这个效果还不错，也支持在线阅读和格式转换，可以说是相当完善了，发送到kindle的功能比较实用</p>
<!-- more -->
<h1 id="docker-compose">docker-compose</h1>
<p>找到<code>technosoft2000/calibre-web</code>的镜像并使用docker-compose进行部署</p>
<pre><code>version: &quot;3&quot;
services:
  calibre-web:
    image: technosoft2000/calibre-web:latest
    container_name: calibre_web
    environment:
      - APP_REPO=&quot;https://github.com/firer1946/calibre-web.git&quot;
      - AMAZON_KG_URL=&quot;https://github.com/Technosoft2000/docker-calibre-web/releases/download/kindlegen/kindlegen_linux_2.6_i386_v2_9.tar.gz&quot;
      - CALIBRE_INSTALLER_SOURCE_CODE_URL=&quot;https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py&quot;
    volumes:
      - {{calibre_web.config_dir}}:/config
      - {{calibre_web.books_dir}}:/books
    ports:
      - {{calibre_web.port}}:8083
    restart: unless-stopped

</code></pre>
<p>{{calibre_web.config_dir}}修改为自己的配置文件夹，需要权限修改为777，<code>chmod -R 777 &lt;文件夹&gt;</code>，不然无法上传书籍<br>
{{calibre_web.books_dir}} 主要是存放书籍的目录<br>
{{calibre_web.port}} 开放端口<br>
网络不好的话最好把AMAZON_KG_URL，CALIBRE_INSTALLER_SOURCE_CODE_URL的文件手动下载下来，使用ansible部署还是比较方便的</p>
<h1 id="中文化修改">中文化修改</h1>
<p>通过technosoft2000的镜像部署下来发现<code>下载</code>和<code>推送到kindle</code>的中文书籍都是拼音，原来是存储的时候使用了拼音作为文件名，所以在下载和发邮件的部分做了一些魔改，具体修改见<a href="https://github.com/firer1946/calibre-web.git">仓库</a>,由于只是针对中文下的修改，所以就不提pr了</p>
<p>效果如下:<br>
<img src="https://firer1946.github.io/post-images/1609749387042.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[start]]></title>
        <id>https://firer1946.github.io/post/start/</id>
        <link href="https://firer1946.github.io/post/start/">
        </link>
        <updated>2021-01-04T08:08:35.000Z</updated>
        <summary type="html"><![CDATA[<p>2021，开始重新写blogs，简单记录一下，使用什么工具不重要，只要是快速开始写起来就很好，gridea还是比较方便的，相当于本地的静态站点生成器，同步到github pages 对应的仓库即可</p>
]]></summary>
        <content type="html"><![CDATA[<p>2021，开始重新写blogs，简单记录一下，使用什么工具不重要，只要是快速开始写起来就很好，gridea还是比较方便的，相当于本地的静态站点生成器，同步到github pages 对应的仓库即可</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://firer1946.github.io/post-images/1609747839605.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>