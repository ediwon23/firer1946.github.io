[{"content":"一枚软件工程师\n邮箱： firer1946x@gmail.com\n最近在看jojo石之海\n","permalink":"https://firer1946.github.io/about/","summary":"一枚软件工程师\n邮箱： firer1946x@gmail.com\n最近在看jojo石之海","title":"关于"},{"content":"由于最近qq扫描浏览器文件的问题，只能把这些不规矩的软件都请到虚拟机里边去了，包括深信服，深信服装个windows版的v2ray服务端映射出来即可\nhyper-v虚拟机 选择这个是因为性能够强，几乎能达到物理机的水平，内存分配1.5g，cpu 2核\n把qq和微信直接扔进去耍就可以了,好处就是几乎不会关机,物理机关机只会挂起相当于睡眠\n微信不用每次都重新登录\n远程分辨率的问题 由于使用4k屏发现远程桌面不全屏缩放比例就不对了，找了半天终于找到了解决方案，虽然不知道具体原理，但是基本解决了问题，保持原始分辨率，虽然糊了点\n解决方案\n1 2 3 4 5 6 7  cd %systemroot%\\system32 copy mstsc.exe mstsc2.exe cd %systemroot%\\system32\\en-us\\ copy mstsc.exe.mui mstsc2.exe.mui # 修改注册表 reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Layers\u0026#34; /t REG_SZ /v \u0026#34;C:\\Windows\\System32\\mstsc2.exe\u0026#34; /d \u0026#34;~ DPIUNAWARE\u0026#34; /f   然后把rdp保存为配置文件运行即可\n1  mstsc2 xxx.rdp   最终效果 效果比想象地要好，几乎没有什么延迟\n","permalink":"https://firer1946.github.io/post/2021/junk%E8%BD%AF%E4%BB%B6%E9%9A%94%E7%A6%BB%E8%AE%A1%E5%88%92/","summary":"由于最近qq扫描浏览器文件的问题，只能把这些不规矩的软件都请到虚拟机里边去了，包括深信服，深信服装个windows版的v2ray服务端映射出来即可\nhyper-v虚拟机 选择这个是因为性能够强，几乎能达到物理机的水平，内存分配1.5g，cpu 2核\n把qq和微信直接扔进去耍就可以了,好处就是几乎不会关机,物理机关机只会挂起相当于睡眠\n微信不用每次都重新登录\n远程分辨率的问题 由于使用4k屏发现远程桌面不全屏缩放比例就不对了，找了半天终于找到了解决方案，虽然不知道具体原理，但是基本解决了问题，保持原始分辨率，虽然糊了点\n解决方案\n1 2 3 4 5 6 7  cd %systemroot%\\system32 copy mstsc.exe mstsc2.exe cd %systemroot%\\system32\\en-us\\ copy mstsc.exe.mui mstsc2.exe.mui # 修改注册表 reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Layers\u0026#34; /t REG_SZ /v \u0026#34;C:\\Windows\\System32\\mstsc2.exe\u0026#34; /d \u0026#34;~ DPIUNAWARE\u0026#34; /f   然后把rdp保存为配置文件运行即可\n1  mstsc2 xxx.rdp   最终效果 效果比想象地要好，几乎没有什么延迟","title":"junk软件隔离计划"},{"content":"最近需要给之前的命令行程序写一个界面，使用Qt-designer拖界面还是比较方便的，其中一个比较麻烦的问题就是实时输出日志的问题，直接使用os.popen会导致窗口进程直接卡死，需要使用qt提供的Qprocess来处理，然而最终还是有问题；才发现是python的缓存问题，直接运行可以使用-u解决，但是pyinstaller打包不支持unbuffered,最终使用了py2exe\npyqt5 高分屏支持 1  os.environ[\u0026#34;QT_AUTO_SCREEN_SCALE_FACTOR\u0026#34;] = \u0026#34;1\u0026#34;   Qprocess子进程 为了防止大批量的任务导致窗口进程卡死，需要使用qt实现的qprocess来调用，使用os.popen 和 subprocess都是会出问题的\n1 2 3  self.process = QtCore.QProcess() self.textEdit.clear() self.process.start(command)   系统命令实时日志获取 因为python缓冲区的问题，误以为是qt这部分的问题\n1 2 3 4 5 6 7 8 9 10  # process 部分 self.process.readyRead.connect(self.dataReady) # 输出槽函数 def dataReady(self): cursor = self.textEdit.textCursor() cursor.movePosition(cursor.End) text = self.process.readAll() cursor.insertText(str(text)) self.textEdit.ensureCursorVisible() print(text)   打包 使用了好几个打包成exe的工具，发现基本都没办法很好的支持unbuffered，不关闭缓存就无法正常地实时获取运行的日志，pyinstaller, cxfreeze 直接打包还可以，但是不支持，还是py2exe好用\npyinstaller 1 2  # 其他程序没有二进制依赖可以不加--paths pyinstaller --paths C:\\Users\\firer\\.virtualenvs\\compress_images-8VD5V_Md\\Lib\\site-packages\\PyQt5\\Qt\\bin -F -w .\\image_compress_ui.py   cxfreeze 需要打包的文件夹创建setup.py（任意名字都可以）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import sys from cx_Freeze import setup, Executable include_files = [] build_exe_options = {\u0026#39;packages\u0026#39;: [\u0026#39;PIL\u0026#39;], \u0026#39;excludes\u0026#39;: [], \u0026#39;include_files\u0026#39;:include_files } base = None if sys.platform == \u0026#39;win32\u0026#39;: base = \u0026#39;Win32GUI\u0026#39; setup( name = \u0026#39;imagesCompress\u0026#39;, version = \u0026#39;0.1\u0026#39;, description = \u0026#39;文件压缩\u0026#39;, options = {\u0026#39;build_exe\u0026#39;: build_exe_options}, executables = [Executable(\u0026#39;image_compress.py\u0026#39;)])   然后执行 python .\\setup.py build\npy2exe 同cxfreeze\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  import os from distutils.core import setup import py2exe Mydata_files = [] # for files in os.listdir(\u0026#39;C:/path/to/image/directory/\u0026#39;): # f1 = \u0026#39;C:/path/to/image/directory/\u0026#39; + files # if os.path.isfile(f1): # skip directories # f2 = \u0026#39;images\u0026#39;, [f1] # Mydata_files.append(f2) setup( console=[\u0026#39;image_compress.py\u0026#39;], data_files = [], options={ \u0026#34;py2exe\u0026#34;:{ \u0026#34;unbuffered\u0026#34;: True, # 这句很关键 \u0026#34;optimize\u0026#34;: 2, \u0026#34;excludes\u0026#34;: [] } } )   然后执行python .\\py2exe_setup.py py2exe即可\n","permalink":"https://firer1946.github.io/post/2021/pyqt5-python%E6%89%93%E5%8C%85/","summary":"最近需要给之前的命令行程序写一个界面，使用Qt-designer拖界面还是比较方便的，其中一个比较麻烦的问题就是实时输出日志的问题，直接使用os.popen会导致窗口进程直接卡死，需要使用qt提供的Qprocess来处理，然而最终还是有问题；才发现是python的缓存问题，直接运行可以使用-u解决，但是pyinstaller打包不支持unbuffered,最终使用了py2exe\npyqt5 高分屏支持 1  os.environ[\u0026#34;QT_AUTO_SCREEN_SCALE_FACTOR\u0026#34;] = \u0026#34;1\u0026#34;   Qprocess子进程 为了防止大批量的任务导致窗口进程卡死，需要使用qt实现的qprocess来调用，使用os.popen 和 subprocess都是会出问题的\n1 2 3  self.process = QtCore.QProcess() self.textEdit.clear() self.process.start(command)   系统命令实时日志获取 因为python缓冲区的问题，误以为是qt这部分的问题\n1 2 3 4 5 6 7 8 9 10  # process 部分 self.process.readyRead.connect(self.dataReady) # 输出槽函数 def dataReady(self): cursor = self.textEdit.textCursor() cursor.movePosition(cursor.End) text = self.process.readAll() cursor.insertText(str(text)) self.textEdit.ensureCursorVisible() print(text)   打包 使用了好几个打包成exe的工具，发现基本都没办法很好的支持unbuffered，不关闭缓存就无法正常地实时获取运行的日志，pyinstaller, cxfreeze 直接打包还可以，但是不支持，还是py2exe好用\npyinstaller 1 2  # 其他程序没有二进制依赖可以不加--paths pyinstaller --paths C:\\Users\\firer\\.","title":"pyqt5 \u0026\u0026 python打包"},{"content":"这个工具写入u盘后可以直接启动iso镜像，以后就不用反复地格盘了，平时也可以正常当u盘使用，配合wepe工具箱应该很不错\n类似功能的听说还有yumi\n","permalink":"https://firer1946.github.io/post/2021/ventoy-iso%E5%90%AF%E5%8A%A8/","summary":"这个工具写入u盘后可以直接启动iso镜像，以后就不用反复地格盘了，平时也可以正常当u盘使用，配合wepe工具箱应该很不错\n类似功能的听说还有yumi","title":"ventoy iso启动"},{"content":"之前统计系统到需要亿级的用户设备id去重，统计新增用户，直接使用clickhouse join由于笛卡尔积的原因导致效率偏低，早有听闻hbase rowkey的效率比较高，就想到了使用它来进行去重，把需要去重的键值连起来，每条数据查重理论上复杂度为1，当成一个比较大的redis来使用。\n使用起来效果非常惊人，Result[] get(List\u0026lt;Get\u0026gt; var1) 这个函数提供了大量rowkey的查询，10万条数据几乎不到1s的时间，使用java进行求差集的效率也很不错，整体每天的数据批量去重只需要几秒钟就能完成\n如果时间差距过大，采取每天轮询的方式还是很不错的，保证每个批次的数据量不会太大，降低hbase的数据吞吐压力，曾经尝试每次查询200万的数据都是没有问题，只是数据传输的时间会长一些\n当然也可以用来redis来做这个处理，但是redis可能持久化存储这么多数据是一件比较麻烦的事情，而hbase本来就有海量存储的这个属性，不得不说比hive快了好多\n","permalink":"https://firer1946.github.io/post/2021/%E8%B6%85%E5%A4%A7%E9%87%8F%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D/","summary":"之前统计系统到需要亿级的用户设备id去重，统计新增用户，直接使用clickhouse join由于笛卡尔积的原因导致效率偏低，早有听闻hbase rowkey的效率比较高，就想到了使用它来进行去重，把需要去重的键值连起来，每条数据查重理论上复杂度为1，当成一个比较大的redis来使用。\n使用起来效果非常惊人，Result[] get(List\u0026lt;Get\u0026gt; var1) 这个函数提供了大量rowkey的查询，10万条数据几乎不到1s的时间，使用java进行求差集的效率也很不错，整体每天的数据批量去重只需要几秒钟就能完成\n如果时间差距过大，采取每天轮询的方式还是很不错的，保证每个批次的数据量不会太大，降低hbase的数据吞吐压力，曾经尝试每次查询200万的数据都是没有问题，只是数据传输的时间会长一些\n当然也可以用来redis来做这个处理，但是redis可能持久化存储这么多数据是一件比较麻烦的事情，而hbase本来就有海量存储的这个属性，不得不说比hive快了好多","title":"超大量用户数据去重"},{"content":"最近开始准备书单开始读书，需要一个管理系统来管理书籍，看到这个效果还不错，也支持在线阅读和格式转换，可以说是相当完善了，发送到kindle的功能比较实用\ndocker-compose 找到technosoft2000/calibre-web的镜像并使用docker-compose进行部署\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  version:\u0026#34;3\u0026#34;services:calibre-web:image:technosoft2000/calibre-web:latestcontainer_name:calibre_webenvironment:- APP_REPO=\u0026#34;https://github.com/firer1946/calibre-web.git\u0026#34;- AMAZON_KG_URL=\u0026#34;https://github.com/Technosoft2000/docker-calibre-web/releases/download/kindlegen/kindlegen_linux_2.6_i386_v2_9.tar.gz\u0026#34;- CALIBRE_INSTALLER_SOURCE_CODE_URL=\u0026#34;https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py\u0026#34;volumes:- {{calibre_web.config_dir}}:/config- {{calibre_web.books_dir}}:/booksports:- {{calibre_web.port}}:8083restart:unless-stopped  {{calibre_web.config_dir}}修改为自己的配置文件夹，需要权限修改为777，chmod -R 777 \u0026lt;文件夹\u0026gt;，不然无法上传书籍\n{{calibre_web.books_dir}} 主要是存放书籍的目录\n{{calibre_web.port}} 开放端口\n网络不好的话最好把AMAZON_KG_URL，CALIBRE_INSTALLER_SOURCE_CODE_URL的文件手动下载下来，使用ansible部署还是比较方便的\n中文化修改 通过technosoft2000的镜像部署下来发现下载和推送到kindle的中文书籍都是拼音，原来是存储的时候使用了拼音作为文件名，所以在下载和发邮件的部分做了一些魔改，具体修改见仓库,由于只是针对中文下的修改，所以就不提pr了\n效果如下:\n","permalink":"https://firer1946.github.io/post/2021/calibre-web%E7%9A%84%E9%83%A8%E7%BD%B2/","summary":"最近开始准备书单开始读书，需要一个管理系统来管理书籍，看到这个效果还不错，也支持在线阅读和格式转换，可以说是相当完善了，发送到kindle的功能比较实用\ndocker-compose 找到technosoft2000/calibre-web的镜像并使用docker-compose进行部署\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  version:\u0026#34;3\u0026#34;services:calibre-web:image:technosoft2000/calibre-web:latestcontainer_name:calibre_webenvironment:- APP_REPO=\u0026#34;https://github.com/firer1946/calibre-web.git\u0026#34;- AMAZON_KG_URL=\u0026#34;https://github.com/Technosoft2000/docker-calibre-web/releases/download/kindlegen/kindlegen_linux_2.6_i386_v2_9.tar.gz\u0026#34;- CALIBRE_INSTALLER_SOURCE_CODE_URL=\u0026#34;https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py\u0026#34;volumes:- {{calibre_web.config_dir}}:/config- {{calibre_web.books_dir}}:/booksports:- {{calibre_web.port}}:8083restart:unless-stopped  {{calibre_web.config_dir}}修改为自己的配置文件夹，需要权限修改为777，chmod -R 777 \u0026lt;文件夹\u0026gt;，不然无法上传书籍\n{{calibre_web.books_dir}} 主要是存放书籍的目录\n{{calibre_web.port}} 开放端口\n网络不好的话最好把AMAZON_KG_URL，CALIBRE_INSTALLER_SOURCE_CODE_URL的文件手动下载下来，使用ansible部署还是比较方便的\n中文化修改 通过technosoft2000的镜像部署下来发现下载和推送到kindle的中文书籍都是拼音，原来是存储的时候使用了拼音作为文件名，所以在下载和发邮件的部分做了一些魔改，具体修改见仓库,由于只是针对中文下的修改，所以就不提pr了\n效果如下:","title":"calibre-web的部署"},{"content":"2021，开始重新写blogs，简单记录一下，使用什么工具不重要，只要是快速开始写起来就很好，gridea还是比较方便的，相当于本地的静态站点生成器，同步到github pages 对应的仓库即可\n","permalink":"https://firer1946.github.io/post/2021/start/","summary":"2021，开始重新写blogs，简单记录一下，使用什么工具不重要，只要是快速开始写起来就很好，gridea还是比较方便的，相当于本地的静态站点生成器，同步到github pages 对应的仓库即可","title":"start"}]